@model TekiBlog.ViewModels.CreateArticleViewModel
@inject ActionServices.IService service
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment webhost
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using System.Web

@{
    ViewData["Title"] = "Editor";
}

@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration

@section Styles{
    <link rel="stylesheet" href="~/css/editor.min.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/detail.min.css" asp-append-version="true" />


    <link rel="https://bootstrap-tagsinput.github.io/bootstrap-tagsinput/examples/assets/app.css" />
    <link rel="stylesheet" href="~/css/bootstrap-tagsinput.css">
}

@section Scripts{
    <script>
        const DRAFT_ADDR = "@Url.Action("ArticleDraft", "Article")";
    </script>
    <script type="text/javascript" src="~/js/tinymce/tinymce.min.js"></script>
    <script type="text/javascript" src="~/js/editor.min.js" asp-append-version="true"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/typeahead.js/0.11.1/typeahead.bundle.min.js"></script>
    <script src="https://bootstrap-tagsinput.github.io/bootstrap-tagsinput/dist/bootstrap-tagsinput.min.js"></script>

    <script>


        var tags = new Bloodhound({
            datumTokenizer: Bloodhound.tokenizers.obj.whitespace('text'),
            queryTokenizer: Bloodhound.tokenizers.whitespace,
            prefetch: "/Tag/Get"
        });
        tags.initialize();

        var elt = $('#bootstrap-tagsinput');
        elt.tagsinput({
            itemValue: 'value',
            itemText: 'text',
            typeaheadjs: {
                name: 'cities',
                displayKey: 'text',
                source: tags.ttAdapter()
            }
        });

        function GetData() {
            var a = elt.val();
            console.log(a);
        }
    </script>

    @if(Model != null && Model.ArticleTags?.Count() != null){
        foreach (var at in Model.ArticleTags)
        {
            <script>
                console.log("@at.Tag.Name");
                elt.tagsinput('add', { "value": @at.TagId, "text": "@at.Tag.Name", "continent": "Tag" });
            </script>
        }
    }

    @if (@Model != null)
    {
        <script>
            $(document).ready(function () {
                firstValidation = false;
                // Write your JavaScript code.
                $("input[type='file']").prop('required', false);
                $("img").on("error", function () {
                    $("input[type='file']").prop('required', true);
                    $("#file-invalid").removeClass("d-none");
                });
            });
        </script>
    }
}

@section CoverImg{
    <div class="article-header">
        <div class="article-img-container">
            @*@{
            string img = $"{@Configuration["Credentials:AWS:ImagePathPre"]}{Configuration["Credentials:AWS:ImageBucket"]}{@Configuration["Credentials:AWS:ImagePathPost"]}";
        }
        <img id="article-img-cover" src="@img/@Model?.Id" />*@
            @if (Model != null && Model.CoverImage != null)
            {
                <img id="article-img-cover" src="data:image;base64,@System.Convert.ToBase64String(Model?.CoverImage)" />
            }
            else
            {
                <img id="article-img-cover" src="" />
            }
        </div>
        <div class="flx-container article-header-info-container">
            <div class="article-header-info-inner col-9">

                <div class="form-container">
                    <small id="titleHelp" class="form-text text-muted">
                        Write a brief title for your article <sup class="input-required"></sup>
                    </small>
                    <h1 id="form-title"
                        class="title article-input"
                        aria-describedby="titleHelp"
                        contenteditable="true"
                        data-placeholder='title here'>
                        @Model?.Title
                    </h1>
                    <small class="charcount-input" count-for="form-title"></small>
                    <small class="invalid-input"
                           validate-for="form-title"
                           input-display-name="Title"
                           input-required
                           input-min-len='@ViewData["TitleMinLen"]'
                           input-max-len='@ViewData["TitleMaxLen"]'></small>
                </div>


            </div>
        </div>
    </div>
}

<partial name="_NotificationPartial">

    <form id="add-action-template" asp-controller="Article" asp-action="PostArticle"></form>
    <form id="update-action-template" asp-controller="Article" asp-action="UpdateArticle"></form>

    <div class="flx-container">
        <div class="col-9 article-detail">
            <form id="form" asp-controller="Article"
                  asp-action="@(Model != null ? "UpdateArticle" : "PostArticle" )"
                  onsubmit="bindData()"
                  method="post"
                  enctype="multipart/form-data">

                <small id="fileHelp" class="form-text text-muted">
                    Choose a cover image for your article, 16:9 ratio and 5MB maximum<sup class="input-required"></sup>
                </small>
                <div class="form-container">

                    <input id="fileHelp file1" type="file"
                           name="file1" class="fileinput form-control-file"
                           accept="image/*"
                           onchange="previewFile(this); hideField('#file-invalid');"
                           required />

                    <small id="file-invalid" class="invalid-input d-none">Empty image field</small>
                </div>

                <small class="form-text text-muted">
                    Enter your article tags <sup class="input-required"></sup>
                </small>
                <div class="form-container">
                    <input id="bootstrap-tagsinput" asp-for="@Model.TagsString" type="text" placeholder="Add tags" class="form-control" required/>
                    @if (Model != null && (Model.ArticleTags == null || Model.ArticleTags.Count == 0))
                    {
                        <small id="tag-invalid" class="invalid-input">Empty tag field</small>
                    }
                </div>


                <small id="tldrHelp" class="form-text text-muted">
                    Write a brief summary for your article
                </small>
                <div class="form-container">
                    <blockquote class="blockquote" aria-describedby="tldrHelp">
                        <p id="form-tldr"
                           class="mb-0 article-input"
                           contenteditable="true"
                           data-placeholder="summary here">@Model?.Summary</p>
                        <small class="charcount-input" count-for="form-tldr"></small>
                    </blockquote>
                    <small class="invalid-input"
                           input-display-name="Summary"
                           validate-for="form-tldr"
                           input-max-len='@ViewData["SummaryMaxLen"]'
                           input-min-len='@ViewData["SummaryMinLen"]'
                           default-value=true></small>
                </div>

                @if (Model != null)
                {
                    <input type="hidden" id="input-id" asp-for="@Model.Id">
                }

                <input type="hidden" id="input-raw" asp-for="@Model.ArticleRaw">
                <input type="hidden" id="input-title" asp-for="@Model.Title">
                <input type="hidden" id="input-tldr" asp-for="@Model.Summary">
                <input type="hidden" id="input-content" asp-for="@Model.ArticleContent">

                <small id="contentHelp" class="form-text text-muted">
                    Write your article content here <sup class="input-required"></sup>
                </small>
                <div class="form-container">

                    <div id="form-content" class="article-input" aria-describedby="contentHelp">
                    </div>
                    <small class="charcount-input charcount-show" count-for="input-raw"></small>
                    <small class="invalid-input"
                           validate-for="form-content"
                           input-display-name="Content"
                           input-required
                           input-min-len='@ViewData["ContentMinLen"]'
                           input-max-len='@ViewData["ContentMaxLen"]'></small>
                </div>
                <input id="btnReturn"
                       class="btn btn-outline-secondary btn-outline btn-outline-alt accept-policy my-2 my-sm-0"
                       action="action"
                       onclick="window.history.go(-1); return false;"
                       type="submit"
                       value="Return" />

                <button id="btnSave" class="btn btn-outline-secondary btn-outline my-2 my-sm-0" type="submit">
                    <i class="fa fa-save"></i> Save As Draft
                </button>

                <button id="btnSubmit" class="btn btn-outline-secondary my-2 my-sm-0" type="submit">
                    <i class="fa fa-pencil"></i> @(Model != null ? "Update Article" : "Post Article" )
                </button>

            </form>

        </div>
    </div>
